rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function getUserData(uid) {
      // This is safe because we check for existence before calling it.
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isAdmin() {
      // Use exists() for safety in case the user doc doesn't exist yet
      return isSignedIn() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             getUserData(request.auth.uid).role in ['admin', 'CRO', 'Super-admin'];
    }
    
    function isEvaluator() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             getUserData(request.auth.uid).role in ['Evaluator', 'CRO', 'Super-admin', 'admin'];
    }

    // Collection: users
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId); // A user can only create their own profile.
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Collection: projects
    match /projects/{projectId} {
      // Admin can read/write everything.
      // PIs can create/read/update their own projects.
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.pi_uid); // User can create their own.
      allow update: if isOwner(resource.data.pi_uid) || isAdmin();

      // Subcollection: evaluations
      match /evaluations/{evaluatorId} {
        // Admin can read/write everything.
        // Evaluators can read/write their own evaluation.
        allow read: if isOwner(evaluatorId) || isAdmin();
        allow write: if (isOwner(evaluatorId) && isEvaluator()) || isAdmin();
      }
    }
    
    // Collection: notifications
    match /notifications/{notificationId} {
      // Users can read/update their own notifications.
      // Admins can read/update any notification.
      // Nobody can create notifications from the client.
      allow read, update: if isOwner(resource.data.uid) || isAdmin();
      allow create: if false; // Only server can create
    }
    
    // Collection: incentiveClaims
    match /incentiveClaims/{claimId} {
      // Users can create their own claims.
      // Admins can do anything.
      // Users can read their own claims.
      allow create: if isOwner(request.resource.data.uid);
      allow read, update: if isOwner(resource.data.uid) || isAdmin();
    }
  }
}
