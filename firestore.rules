
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to get user's role
    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }

    // Helper function to check if the user is an admin or super-admin
    function isAdmin() {
      // Ensure the user document exists before trying to access its data
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && getUserRole(request.auth.uid) in ['admin', 'Super-admin'];
    }

    // Secure users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId; // Allow user to create their own doc on signup
      allow update: if request.auth.uid == userId || isAdmin(); // Allow user to update own profile, or admin to update any
      allow delete: if isAdmin(); // Only admins can delete users
    }

    // Secure projects collection
    match /projects/{projectId} {
      allow read: if isSignedIn();
      // Allow PI to create/update. Allow admin to update.
      allow create: if request.auth.uid == request.resource.data.pi_uid;
      allow update: if request.auth.uid == request.resource.data.pi_uid || isAdmin() || getUserRole(request.auth.uid) == 'Evaluator';

      // Secure evaluations subcollection
      match /evaluations/{evaluatorId} {
        // Only the assigned evaluator can create/update their own evaluation.
        allow write: if isSignedIn() && request.auth.uid == evaluatorId;
        allow read: if isSignedIn();
      }
    }

    // Secure incentive claims collection
    match /incentiveClaims/{claimId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.uid;
      allow update: if isAdmin();
    }

    // Secure notifications collection
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && request.auth.uid == resource.data.uid;
      allow create: if isAdmin(); // Only admins (server actions) can create notifications
    }

    // Secure counters collection (for admins only)
    match /counters/{counterId} {
      allow read, write: if isAdmin();
    }
  }
}
