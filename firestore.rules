
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check for admin roles
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'CRO', 'Super-admin'];
    }

    // Helper function to check for evaluator role
    function isEvaluator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Evaluator';
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read/update their own profile. Admins can manage all users.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow delete: if isAdmin();
    }

    // Projects can be read by any authenticated user.
    // Creation is limited to faculty members for their own projects.
    // Updates are limited to the PI or admins.
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.pi_uid == request.auth.uid;
      allow update: if (resource.data.pi_uid == request.auth.uid) || isAdmin();
      
      // Evaluations subcollection
      match /evaluations/{evaluatorId} {
        allow read: if isAdmin() || (isEvaluator() && isOwner(evaluatorId));
        allow write: if isEvaluator() && isOwner(evaluatorId);
      }
    }
    
    // Users can only read and update their own notifications.
    match /notifications/{notificationId} {
        allow read, update: if resource.data.uid == request.auth.uid;
        allow create: if false; // Creation is handled by server actions.
    }
    
    // Counters are managed by server-side logic only.
    match /counters/{counterId} {
      allow read, write: if false;
    }
  }
}
