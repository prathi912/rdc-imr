rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isRole(role) {
        return isSignedIn() && getUserData(request.auth.uid).role == role;
    }
    
    function userRole() {
      return getUserData(request.auth.uid).role;
    }

    function isSuperAdmin() {
        return isRole('Super-admin');
    }
    
    function isAdmin() {
      return userRole() in ['admin', 'Super-admin', 'CRO'];
    }
    
    function isFaculty() {
      return isRole('faculty');
    }
    
    function isEvaluator() {
      return isRole('Evaluator');
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      // Allow user to update their own profile, but not their role.
      // Super admin can update any field.
      allow update: if (isUser(userId) && !('role' in request.resource.data)) 
                  || request.auth.token.email == 'rathipranav07@gmail.com';
      allow delete: if request.auth.token.email == 'rathipranav07@gmail.com';
    }
    
    match /projects/{projectId} {
      allow read: if isSignedIn();
      
      // A signed-in user can create a project if they are the principal investigator.
      // The application logic already restricts form access to 'faculty' role.
      allow create: if isSignedIn() && request.resource.data.pi_uid == request.auth.uid;
      
      // Allow PI to update, and admins to update.
      allow update: if isSignedIn() && (
                      resource.data.pi_uid == request.auth.uid || 
                      isAdmin()
                    );
                    
      // Only Super-Admins can delete projects.
      allow delete: if isSuperAdmin();

      match /evaluations/{evaluationId} {
        allow read, write: if isSignedIn() && (isEvaluator() || isAdmin());
      }
    }
    
    match /notifications/{notificationId} {
        allow read: if isSignedIn() && resource.data.uid == request.auth.uid;
        allow create: if isSignedIn(); // Allow server actions to create notifications
        allow update: if isSignedIn() && resource.data.uid == request.auth.uid; // Allow user to mark as read
    }
    
    match /incentiveClaims/{claimId} {
        allow read: if isSignedIn();
        allow create: if isFaculty() && request.resource.data.uid == request.auth.uid;
        allow update: if isSuperAdmin() || isRole('CRO');
    }
  }
}
