
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'role' in userDoc.data &&
             userDoc.data.role in ['admin', 'CRO', 'Super-admin'];
    }

    function isOwner(project) {
        let isPiByUid = request.auth.uid == project.pi_uid;
        let isPiByEmail = request.auth.token.email_verified && request.auth.token.email == project.pi_email;
        return isPiByUid || isPiByEmail;
    }
    
    function hasEvaluatorAccess() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
              'role' in userDoc.data &&
              userDoc.data.role in ['Evaluator', 'admin', 'CRO', 'Super-admin'];
    }

    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.pi_uid;
      // Let a PI update their own project, checking by UID or verified email.
      allow update: if isOwner(resource.data);

      match /evaluations/{evaluatorId} {
        allow read: if hasEvaluatorAccess();
        allow write: if hasEvaluatorAccess() && request.auth.uid == evaluatorId;
      }
    }

    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.uid;
      allow create: if false;
    }
    
    match /incentiveClaims/{claimId} {
      allow create: if request.auth.uid == request.resource.data.uid;
      allow read: if request.auth.uid == resource.data.uid;
      allow update: if false;
    }
  }
}
