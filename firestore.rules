rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ✅ Top-level helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function isGrantUpdateAllowed(request, resource) {
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      let requestGrant = request.resource.data.grant;
      let existingGrant = resource.data.grant;

      // ✅ Single return expression combining all checks
      return changedKeys.hasOnly(['grant']) &&
             existingGrant != null &&
             requestGrant.amount == existingGrant.amount &&
             requestGrant.status == existingGrant.status &&
             requestGrant.disbursementDate == existingGrant.disbursementDate;
    }

    // USERS
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if request.auth != null;
      allow update: if isOwner(userId);
      allow delete: if isAdmin();
    }

    // PROJECTS
    match /projects/{projectId} {
      allow read: if isOwner(resource.data.pi_uid) || isAdmin();
      allow create: if request.auth != null;
      allow update: if isAdmin() || (isOwner(resource.data.pi_uid) && isGrantUpdateAllowed(request, resource));
      allow delete: if isAdmin();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.uid);
      allow create: if request.auth != null;
    }
  }
}
