
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isUser(uid) {
      return isAuth() && request.auth.uid == uid;
    }
    
    function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
      return isAuth() && getUserData().role in ['admin', 'Super-admin', 'CRO'];
    }
    
    function isEvaluator() {
        return isAuth() && getUserData().role == 'Evaluator';
    }

    // User profiles
    match /users/{userId} {
      allow read, update: if isUser(userId) || isAdmin();
      allow create: if isAuth();
      allow delete: if isAdmin();
    }
    
    // Project counters
    match /counters/{docId} {
        allow read, write: if isAuth();
    }
    
    // Notifications
    match /notifications/{docId} {
        allow create: if isAuth(); // Allow clients to create notifications for now
        allow read, update: if isUser(resource.data.uid); // Users can read/update their own notifications
    }

    // Projects collection
    match /projects/{projectId} {
      allow read: if isAuth();
      
      allow create: if isAuth() && request.resource.data.pi_uid == request.auth.uid;
      
      // Admins can update.
      // Evaluators can update a project if it's "Under Review".
      // The PI can update if they are the owner.
      allow update: if isAdmin() ||
                     (isEvaluator() && resource.data.status == 'Under Review') ||
                     isUser(resource.data.pi_uid);

      allow delete: if isAdmin();

      // Evaluations subcollection
      match /evaluations/{evaluatorId} {
        // An evaluator can write to their own evaluation document. Admins and the evaluator can read.
        allow read: if isAdmin() || isUser(evaluatorId);
        allow write: if isUser(evaluatorId) && isEvaluator();
      }
    }
  }
}
