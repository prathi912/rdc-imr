rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get the requesting user's data from the users collection
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function to check if a user is one of the admin types
    function isAdmin() {
      let userRole = getUserData().role;
      return userRole in ['admin', 'CRO', 'Super-admin'];
    }

    // Helper function to check if a user is a Principal by their email
    function isPrincipalByEmail() {
      // This list must be kept in sync with src/lib/constants.ts
      let principalEmails = [
        'ahmc@paruluniversity.ac.in', 'apc@paruluniversity.ac.in', 'agriculture@paruluniversity.ac.in',
        'dphs@paruluniversity.ac.in', 'fls@paruluniversity.ac.in', 'ips@paruluniversity.ac.in',
        'jnhmc@paruluniversity.ac.in', 'pcpr@paruluniversity.ac.in', 'fasahm@paruluniversity.ac.in',
        'fasvdr@paruluniversity.ac.in', 'piar@paruluniversity.ac.in', 'piarts@paruluniversity.ac.in',
        'pia@paruluniversity.ac.in', 'piaresearch@paruluniversity.ac.in', 'piba@paruluniversity.ac.in',
        'pic@paruluniversity.ac.in', 'pica@paruluniversity.ac.in', 'pid@paruluniversity.ac.in',
        'piet@paruluniversity.ac.in', 'pietds1@paruluniversity.ac.in', 'ffa@paruluniversity.ac.in',
        'pihr@paruluniversity.ac.in', 'pihmct@paruluniversity.ac.in', 'pil@paruluniversity.ac.in',
        'pim@paruluniversity.ac.in', 'pimr@paruluniversity.ac.in', 'pimsr@paruluniversity.ac.in',
        'pin@paruluniversity.ac.in', 'pipa@paruluniversity.ac.in', 'piper@paruluniversity.ac.in',
        'piph@paruluniversity.ac.in', 'pipr@paruluniversity.ac.in', 'pipt@paruluniversity.ac.in',
        'piptr@paruluniversity.ac.in', 'pisw@paruluniversity.ac.in', 'pit@paruluniversity.ac.in',
        'fve@paruluniversity.ac.in', 'medical@paruluniversity.ac.in', 'ppi1@paruluniversity.ac.in',
        'pupublichealth@paruluniversity.ac.in', 'psh@paruluniversity.ac.in', 'rhmc@paruluniversity.ac.in',
        'rdc@paruluniversity.ac.in', 'sop@paruluniversity.ac.in'
      ];
      return request.auth.token.email in principalEmails;
    }

    // Helper function to check if user is an HOD
    function isHod() {
      return getUserData().designation == 'HOD';
    }

    // This is a "god-mode" rule for admins.
    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;
    }
    
    match /projects/{projectId} {
      // GET: Allow reading a single document
      allow get: if request.auth.uid == resource.data.pi_uid ||
                   request.auth.uid in resource.data.coPiUids ||
                   (resource.data.meetingDetails != null && request.auth.uid in resource.data.meetingDetails.assignedEvaluators) ||
                   (isPrincipalByEmail() && getUserData().institute == resource.data.institute) ||
                   (isHod() && getUserData().department == resource.data.departmentName);

      // LIST: Allow querying multiple documents
      allow list: if request.auth != null && (
                    // Query for user's own projects as PI
                    (request.query.where[0] == ['pi_uid', '==', request.auth.uid]) ||
                    // Query for user's own projects as Co-PI
                    (request.query.where[0] == ['coPiUids', 'array-contains', request.auth.uid]) ||
                    // Query for user's evaluation assignments
                    (request.query.where[0] == ['meetingDetails.assignedEvaluators', 'array-contains', request.auth.uid]) ||
                    // Corrected rule for querying historical data by email
                    (request.query.size() == 2 && request.query.where[0] == ['pi_email', '==', request.auth.token.email] && request.query.where[1] == ['pi_uid', 'in', ['', null]]) ||
                    // Queries for Principals by institute
                    (isPrincipalByEmail() && request.query.where[0] == ['institute', '==', getUserData().institute]) ||
                    // Queries for HODs by department
                    (isHod() && request.query.where[0] == ['departmentName', '==', getUserData().department])
                   );

      // CREATE: Allow a user to create a project only for themselves
      allow create: if request.auth.uid == request.resource.data.pi_uid &&
                      request.resource.data.status in ['Draft', 'Submitted'] &&
                      !('grant' in request.resource.data) &&
                      !('meetingDetails' in request.resource.data);
      
      // UPDATE: Allow a PI to update their own project, or an evaluator to submit an evaluation
      allow update: if (request.auth.uid == resource.data.pi_uid && !('status' in request.resource.data.diff(resource.data).affectedKeys()) && !('grant' in request.resource.data.diff(resource.data).affectedKeys())) ||
                      (get(/databases/$(database)/documents/projects/$(projectId)).data.meetingDetails != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.meetingDetails.assignedEvaluators && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['evaluatedBy']));

      // Evaluations Subcollection
      match /evaluations/{evaluatorId} {
        function isAssignedToThisProject() {
            let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
            return projectDoc.data.meetingDetails != null && request.auth.uid in projectDoc.data.meetingDetails.assignedEvaluators;
        }
        allow read: if isAssignedToThisProject();
        allow write: if isAssignedToThisProject() && request.auth.uid == evaluatorId;
      }
    }

    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.uid;
      allow create: if false; // Server-only
    }
    
    match /incentiveClaims/{claimId} {
      allow create: if request.auth.uid == request.resource.data.uid;
      allow read: if request.auth.uid == resource.data.uid;
      allow update: if false; // Server-only
    }
  }
}