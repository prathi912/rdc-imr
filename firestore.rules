rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isUser(uid) {
      return isAuth() && request.auth.uid == uid;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isSuperAdmin() {
      return isAuth() && getUserData(request.auth.uid).role == 'Super-admin';
    }

    function isAdmin() {
      return isAuth() && getUserData(request.auth.uid).role in ['admin', 'Super-admin'];
    }

    function isCRO() {
      return isAuth() && getUserData(request.auth.uid).role == 'CRO';
    }
    
    function isFaculty() {
        return isAuth() && getUserData(request.auth.uid).role == 'faculty';
    }

    function isEvaluator() {
       return isAuth() && getUserData(request.auth.uid).role in ['Evaluator', 'CRO', 'admin', 'Super-admin'];
    }

    // USERS collection
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin() || isCRO();
      allow create: if isUser(userId);
      // User can update their own profile, but cannot change their role or permissions. Only Super-admin can do that.
      allow update: if (isUser(userId) && !('role' in request.resource.data) && !('allowedModules' in request.resource.data)) || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // PROJECTS collection
    match /projects/{projectId} {
      allow read: if isAuth();
      allow create: if isFaculty() && request.resource.data.pi_uid == request.auth.uid;
      
      allow update: if 
        // Admin/CRO can update project status, meeting details, and grant information
        (isAdmin() || isCRO()) || 
        // The project's PI can submit completion documents or bank details
        (isUser(resource.data.pi_uid) && 
            ('completionReportUrl' in request.resource.data || 'grant' in request.resource.data) &&
            resource.data.status in ['Approved', 'In Progress', 'Disbursed']);
    }
    
    // EVALUATIONS sub-collection
    match /projects/{projectId}/evaluations/{evaluatorId} {
        allow read: if isAdmin() || isCRO();
        // An evaluator can only create or update their own evaluation document
        allow write: if isEvaluator() && isUser(evaluatorId);
    }
    
    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
        // A user can read or update (mark as read) their own notifications
        allow read, update: if isAuth() && resource.data.uid == request.auth.uid;
        // Only an Admin or CRO can create notifications (e.g., when scheduling a meeting)
        allow create: if isAdmin() || isCRO();
    }
    
    // INCENTIVE CLAIMS collection
    match /incentiveClaims/{claimId} {
        allow read: if (isAuth() && resource.data.uid == request.auth.uid) || isAdmin() || isCRO();
        allow create: if isAuth() && request.resource.data.uid == request.auth.uid;
        // Only Admin or CRO can update the status of a claim
        allow update: if (isAdmin() || isCRO()) && !('uid'in request.resource.data);
    }
  }
}
