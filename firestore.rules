
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== HELPER FUNCTIONS =====
    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      // Ensure the user document exists and has a role that's in the admin list
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'role' in userDoc.data &&
             userDoc.data.role in ['admin', 'CRO', 'Super-admin'];
    }

    function canEvaluate() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      // Checks if the user has the specific module assigned to them, regardless of role.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'allowedModules' in userDoc.data &&
             'evaluator-dashboard' in userDoc.data.allowedModules;
    }

    // ===== GLOBAL ADMIN RULE =====
    // If a user is an admin, they can do anything.
    // This rule is checked first. If it's true, access is granted.
    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    // ===== NON-ADMIN RULES =====
    
    match /users/{userId} {
      // Any signed-in user can read a public profile.
      allow read: if request.auth != null;
      // A user can create their own document.
      allow create: if request.auth.uid == userId;
      // A user can only update their own document. Admins are covered by the global rule above.
      allow update: if request.auth.uid == userId;
    }
    
    match /projects/{projectId} {
      // Any signed-in user can read project details.
      allow read: if request.auth != null;
      // A user can only create a project where they are the PI.
      allow create: if request.auth.uid == request.resource.data.pi_uid;
      
      // A PI can update their own project.
      // An evaluator can update ONLY the 'evaluatedBy' field to add themselves.
      allow update: if (request.auth.uid == resource.data.pi_uid) ||
                   (
                      canEvaluate() &&
                      request.resource.data.diff(resource.data)
                        .affectedKeys().hasOnly(['evaluatedBy']) &&
                      (request.auth.uid in request.resource.data.evaluatedBy)
                   );

      // Rules for the evaluations subcollection inside a project
      match /evaluations/{evaluatorId} {
        // A user with evaluator permissions can read any evaluation.
        allow read: if canEvaluate();
        // A user with evaluator permissions can only write their own evaluation.
        allow write: if canEvaluate() && request.auth.uid == evaluatorId;
      }
    }

    match /notifications/{notificationId} {
      // A user can read and update (e.g., mark as read) their own notifications.
      allow read, update: if request.auth.uid == resource.data.uid;
      // All notifications are created by the server using the Admin SDK, so client creation is denied.
      allow create: if false;
    }
    
    match /incentiveClaims/{claimId} {
      // A user can create and read their own incentive claims.
      allow create: if request.auth.uid == request.resource.data.uid;
      allow read: if request.auth.uid == resource.data.uid;
      // All status updates are handled by the server (Admin SDK), so client updates are denied.
      allow update: if false;
    }
  }
}
