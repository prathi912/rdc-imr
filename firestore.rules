rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================
    
    function isAuth() {
      return request.auth != null;
    }
    
    // Checks if the requesting user is an admin-level role.
    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'role' in userDoc.data &&
             userDoc.data.role in ['admin', 'CRO', 'Super-admin'];
    }

    // Checks if the user is a Principal of the same institute as the project.
    function isPrincipalForProject(projectData) {
      let userProfileDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'designation' in userProfileDoc.data && userProfileDoc.data.designation == 'Principal' &&
             'institute' in userProfileDoc.data && 'institute' in projectData &&
             userProfileDoc.data.institute == projectData.institute;
    }
    
    // Checks if the user is an HOD of the same department as the project.
    function isHodForProject(projectData) {
      let userProfileDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'designation' in userProfileDoc.data && userProfileDoc.data.designation == 'HOD' &&
             'department' in userProfileDoc.data && 'departmentName' in projectData &&
             userProfileDoc.data.department == projectData.departmentName;
    }
    
    // Checks if the user is an assigned evaluator for the project.
    function isAssignedEvaluator(projectData) {
      return 'meetingDetails' in projectData && projectData.meetingDetails != null &&
             'assignedEvaluators' in projectData.meetingDetails && projectData.meetingDetails.assignedEvaluators != null &&
             request.auth.uid in projectData.meetingDetails.assignedEvaluators;
    }

    // =================================
    // Admin God-Mode Rule
    // =================================
    // This rule gives admins full read/write access everywhere.
    // It's checked first. If it's true, access is granted.
    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    // =================================
    // Non-Admin Rules
    // =================================
    
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }
    
    match /projects/{projectId} {
      // Allow GET if user is PI, assigned evaluator, Principal, or HOD for the project.
      allow get: if isAuth() && (
                    request.auth.uid == resource.data.pi_uid ||
                    isAssignedEvaluator(resource.data) ||
                    isPrincipalForProject(resource.data) ||
                    isHodForProject(resource.data)
                  );
      
      // Allow LIST for any authenticated user. Client-side queries + 'get' rule will filter results.
      allow list: if isAuth();

      // Allow CREATE if user is the PI, the status is valid, and no admin fields are being set.
      allow create: if isAuth() && 
                      request.auth.uid == request.resource.data.pi_uid &&
                      request.resource.data.status in ['Draft', 'Submitted'] &&
                      !('grant' in request.resource.data) &&
                      !('meetingDetails' in request.resource.data);
      
      // Allow UPDATE for the PI on specific fields, or for an evaluator to add their review.
      allow update: if isAuth() && (
                      ( // PI Update Logic
                        request.auth.uid == resource.data.pi_uid &&
                        // PI cannot change their own UID
                        request.resource.data.pi_uid == resource.data.pi_uid &&
                        // PI can only change these specific fields
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                          'title', 'abstract', 'type', 'sdgGoals', 'teamInfo', 'coPiUids',
                          'timelineAndOutcomes', 'proposalUrl', 'cvUrl', 'ethicsUrl',
                          'status', // Status change is further restricted below
                          'completionReportUrl', 'utilizationCertificateUrl', 'completionSubmissionDate',
                          'revisedProposalUrl', 'revisionSubmissionDate'
                        ]) &&
                        // When a PI updates status, it can only be to these specific values
                        (
                          !("status" in request.resource.data.diff(resource.data).affectedKeys()) ||
                          request.resource.data.status in ['Draft', 'Pending Completion Approval', 'Under Review']
                        )
                      ) ||
                      ( // Evaluator Update Logic
                        isAssignedEvaluator(resource.data) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['evaluatedBy'])
                      )
                    );

      // Subcollection: evaluations
      match /evaluations/{evaluatorId} {
        // You can access an evaluation if you are an assigned evaluator for the parent project.
        function canAccessEvaluation() {
            let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
            return isAssignedEvaluator(projectDoc.data);
        }

        allow read: if isAuth() && canAccessEvaluation();
        allow write: if isAuth() && canAccessEvaluation() && request.auth.uid == evaluatorId;
      }
    }

    match /notifications/{notificationId} {
      allow read, update: if isAuth() && request.auth.uid == resource.data.uid;
      // Deny client creation; server only.
      allow create: if false;
    }
    
    match /incentiveClaims/{claimId} {
      allow create: if isAuth() && request.auth.uid == request.resource.data.uid;
      allow read: if isAuth() && request.auth.uid == resource.data.uid;
      // Deny client updates; server only.
      allow update: if false;
    }
  }
}