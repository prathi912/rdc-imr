
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function canEvaluate() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'allowedModules' in userDoc.data &&
             userDoc.data.allowedModules.hasAny(['evaluator-dashboard']);
    }

    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'role' in userDoc.data &&
             userDoc.data.role in ['admin', 'CRO', 'Super-admin'];
    }

    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }
    
    match /projects/{projectId} {
      allow read: if request.auth.uid == resource.data.pi_uid 
                       || (resource.data.meetingDetails != null && 
                           resource.data.meetingDetails.assignedEvaluators != null && 
                           request.auth.uid in resource.data.meetingDetails.assignedEvaluators);
      
      allow create: if request.auth.uid == request.resource.data.pi_uid;
      
      allow update: if (request.auth.uid == resource.data.pi_uid) || 
                       (canEvaluate() && 
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['evaluatedBy']));

      match /evaluations/{evaluatorId} {
        allow read: if canEvaluate();
        allow write: if canEvaluate() && request.auth.uid == evaluatorId;
      }
    }

    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.uid;
      allow create: if false;
    }
    
    match /incentiveClaims/{claimId} {
      allow create: if request.auth.uid == request.resource.data.uid;
      allow read: if request.auth.uid == resource.data.uid;
      allow update: if false;
    }
  }
}
