rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin, Super-admin, or CRO
    function isPrivilegedUser() {
      // Check if the user document exists and has a role of admin, Super-admin, or CRO
      return exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin', 'Super-admin', 'CRO'];
    }

    // Helper function to check if a user is an evaluator
    function isEvaluator() {
      // Check if the user document exists and has a role of Evaluator
      return exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'Evaluator';
    }

    // Helper function to check if the user is the owner (PI) of a project
    function isProjectOwner(projectId) {
      // Check if the project document exists and the current user is the PI
      return exists(/databases/(default)/documents/projects/$(projectId)) &&
             request.auth.uid == get(/databases/(default)/documents/projects/$(projectId)).data.pi_uid;
    }

    // User Profiles
    match /users/{userId} {
      // Allow admins to query/list users.
      // Allow users to read their own profile directly via a 'get' request.
      allow get: if request.auth != null && (isPrivilegedUser() || request.auth.uid == userId);
      allow list: if request.auth != null && isPrivilegedUser();

      // Users can only create their own profile, or update it.
      allow create, update: if request.auth != null && request.auth.uid == userId;
      // Privileged users can also update any user's profile (e.g., change role).
      allow update: if isPrivilegedUser();
      // Only a super-admin can delete a user's Firestore document.
      allow delete: if get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'Super-admin';
    }

    // Notifications
    match /notifications/{notificationId} {
      // A user can read/write their own notifications
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      // Admins can create notifications for any user (server-side action)
      allow create: if true; // server action will handle auth
    }

    // Projects
    match /projects/{projectId} {
      // Allow read access to the project owner, admins, and evaluators.
      allow read: if request.auth != null &&
                   (isProjectOwner(projectId) || isPrivilegedUser() || isEvaluator());
      // A user can create/update their own project.
      allow create, update: if request.auth != null && isProjectOwner(projectId);
      // Admin can update any project (e.g., change status)
      allow update: if isPrivilegedUser();
    }

    // Project Evaluations Subcollection
    match /projects/{projectId}/evaluations/{evaluatorId} {
        // The project owner and admins can read all evaluations for a project.
        allow read: if request.auth != null && (isProjectOwner(projectId) || isPrivilegedUser());
        // An evaluator can read their own evaluation.
        allow read: if request.auth != null && request.auth.uid == evaluatorId;
        // An evaluator can create/update their own evaluation.
        allow create, update: if request.auth != null && request.auth.uid == evaluatorId;
    }

    // Incentive Claims
    match /incentiveClaims/{claimId} {
        // Users can read/create/update their own claims.
        allow read, create, update: if request.auth != null && request.auth.uid == request.resource.data.uid;
        // Admins can read/update any claim.
        allow read, update: if isPrivilegedUser();
    }
  }
}
