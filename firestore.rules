rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read their own profile, admins can read any.
    match /users/{userId} {
      allow read: if request.auth.uid == userId 
                    || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'Super-admin', 'CRO'];
      allow write: if request.auth.uid == userId;
    }
    
    match /projects/{projectId} {
      // Allow read access if the user is the PI, a Co-PI, an admin, a relevant CRO/Principal/HOD, or an assigned evaluator.
      allow get: if request.auth != null && (
        // PI or Co-PI
        resource.data.pi_uid == request.auth.uid || (request.auth.uid in resource.data.coPiUids)
        // Admin roles
        || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'Super-admin', 'CRO']
        // Principal of the Institute
        || (request.auth.token.email in get(/databases/$(database)/documents/constants/principalEmails).data.emails && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute == resource.data.institute)
        // HOD of the Department
        || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.designation == 'HOD' && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department == resource.data.departmentName)
        // Assigned evaluator
        || (request.auth.uid in resource.data.meetingDetails.assignedEvaluators)
      );

      // Allow listing projects based on role
      allow list: if request.auth != null && (
        // CRO can list projects in their faculty
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CRO' && request.query.where.to_list()[0].value == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.faculty)
        // Principal can list projects in their institute
        || (request.auth.token.email in get(/databases/$(database)/documents/constants/principalEmails).data.emails && request.query.where.to_list()[0].value == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.institute)
         // HOD can list projects in their department
        || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.designation == 'HOD' && request.query.where.to_list()[0].value == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department)
        // Admin and Super-admin can list all projects
        || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'Super-admin']
      );

      // Allow write access only to the PI
      allow write: if request.auth != null && resource.data.pi_uid == request.auth.uid;
      
      // Allow creation for any authenticated user
      allow create: if request.auth != null;

      // Allow admins to delete bulk-uploaded projects.
      allow delete: if request.auth != null 
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'Super-admin']
                    && resource.data.isBulkUploaded == true;

      // Rules for subcollections
      match /evaluations/{evaluatorId} {
        // Allow evaluators to create/update their own evaluation.
        allow write: if request.auth.uid == evaluatorId;
        // Only admins or the PI can read evaluations.
        allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'Super-admin', 'CRO']
                     || get(/databases/$(database)/documents/projects/$(projectId)).data.pi_uid == request.auth.uid;
      }
    }

    match /notifications/{notificationId} {
      // Users can read/write their own notifications.
      allow read, write: if request.auth != null && request.resource.data.uid == request.auth.uid;
    }

    match /incentiveClaims/{claimId} {
      // Users can read/write their own claims.
      allow read, write: if request.auth != null && request.resource.data.uid == request.auth.uid;
      // Admins and CROs can read all claims.
      allow list: if request.auth != null 
                  && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'Super-admin', 'CRO'];
    }

    // A collection to store constants like principal emails.
    // This allows rules to access this list without hardcoding it.
    match /constants/{docId} {
      allow get: if true; // Allow anyone to read constants
    }
  }
}