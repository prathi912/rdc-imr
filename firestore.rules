rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user has an admin-level role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'Super-admin', 'CRO'];
    }

    // Helper function to check if user is a Principal for the given project
    function isPrincipalForProject(projectData) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.designation == 'Principal' && userProfile.institute == projectData.institute;
    }
    
    // Helper function to check if user is an HOD for the given project
    function isHodForProject(projectData) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.designation == 'HOD' && userProfile.department == projectData.departmentName;
    }
    
    // Helper function for the special case user
    function isSpecialUser(projectData) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.email == 'unnati.joshi22950@paruluniversity.ac.in' && projectData.faculty == 'Faculty of Engineering & Technology';
    }

    // Users Collection Rules
    match /users/{userId} {
      // Any authenticated user can read/write their own profile.
      allow read, write: if request.auth.uid == userId;
      // Admins can list and write to any user profile (for role changes, etc.)
      allow list, write: if isAdmin();
    }
    
    // Projects Collection Rules
    match /projects/{projectId} {
      // An authenticated user can create a project (initial draft).
      allow create: if request.auth != null;
      
      // The PI or an admin can update a project.
      allow update: if request.auth.uid == resource.data.pi_uid || isAdmin();
      
      // Read access is granted based on multiple conditions.
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.pi_uid ||
        isAdmin() ||
        isPrincipalForProject(resource.data) ||
        isHodForProject(resource.data) ||
        isSpecialUser(resource.data) ||
        ('meetingDetails' in resource.data && 
         'assignedEvaluators' in resource.data.meetingDetails &&
         request.auth.uid in resource.data.meetingDetails.assignedEvaluators)
      );
      
      // Listing projects is complex and should be secured via queries.
      // This rule allows admins to perform list queries. Other roles rely on more specific queries.
      allow list: if isAdmin();
      
      // Only admins can delete projects (e.g., bulk-uploaded ones).
      allow delete: if isAdmin();

      // Evaluations Subcollection Rules
      match /evaluations/{evaluatorId} {
        // The assigned evaluator can create/update their own evaluation.
        allow write: if request.auth.uid == evaluatorId;
        // The evaluator, admins, and the PI can read an evaluation.
        allow read: if request.auth.uid == evaluatorId || isAdmin() || request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.pi_uid;
      }
    }
    
    // Incentive Claims Collection Rules
    match /incentiveClaims/{claimId} {
      allow create: if request.auth != null;
      // User can read/update their own claims.
      allow read, update: if request.auth.uid == resource.data.uid;
      // Admins can list and update any claim.
      allow list, update: if isAdmin();
    }
    
    // Notifications Collection Rules
    match /notifications/{notificationId} {
      // Users can read and update (e.g., mark as read) their own notifications.
      allow read, update: if request.auth.uid == resource.data.uid;
      // Server-side actions create notifications, so writes are allowed.
      // In a more secure setup, this would be restricted to a service account role.
      allow create: if request.auth != null; 
    }
  }
}
