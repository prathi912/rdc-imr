rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to get user data
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    // Helper function to check for Super-admin role
    function isSuperAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'Super-admin';
    }
    
    // Helper function to check for any Admin-level role
    function isAdmin() {
        return isSignedIn() && getUserData(request.auth.uid).role in ['admin', 'Super-admin', 'CRO'];
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own user document
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Users can read their own data. Super-admins can read any user's data.
      allow get: if isSignedIn() && (request.auth.uid == userId || isSuperAdmin());
      
      // Users can update their own data, but not change their role. Super-admins can update any user, including roles.
      allow update: if isSignedIn() && 
                      ( 
                        (request.auth.uid == userId && request.resource.data.role == resource.data.role) || 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super-admin' 
                      );
                      
      // Only Super-admins can delete users (except themselves)
      allow delete: if isSuperAdmin() && request.auth.uid != userId;
      
      // Admins can list users
      allow list: if isAdmin();
    }

    // Rules for 'projects' collection
    match /projects/{projectId} {
      // Any authenticated user can create (submit) a project.
      allow create: if isSignedIn();
      
      // Reading a project:
      // - Admins can read any project.
      // - The PI of the project can read it.
      // - An evaluator assigned to the project can read it.
      allow get: if isSignedIn() && (isAdmin() || resource.data.pi_uid == request.auth.uid);
      
      // Listing projects:
      // - Authenticated users can list projects. Client-side code must filter.
      allow list: if isSignedIn();
      
      // Updating a project:
      // - Admins can update any project.
      // - The PI can update if the status is not 'Approved' or 'Completed' (e.g. for submitting reports)
      allow update: if isSignedIn() && (isAdmin() || (resource.data.pi_uid == request.auth.uid));

      // Deleting a project: only admins
      allow delete: if isAdmin();
      
      // Subcollection for evaluations
      match /evaluations/{evaluatorId} {
        // Any authenticated user with 'Evaluator' or 'CRO' role can create/update their own evaluation
        allow write: if isSignedIn() && 
                       (getUserData(request.auth.uid).role in ['Evaluator', 'CRO']) &&
                       request.auth.uid == evaluatorId;
        
        // Admins can read any evaluation.
        allow read: if isAdmin();
      }
    }
    
    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
      // Users can only read their own notifications.
      allow read: if isSignedIn() && resource.data.uid == request.auth.uid;
      
      // Users can update their own notifications (e.g., to mark as read).
      allow update: if isSignedIn() && resource.data.uid == request.auth.uid;

      // Server-side logic (actions) creates notifications.
      allow create: if isSignedIn(); // Loosened for client-side creation by actions.
    }
    
    // Rules for 'incentiveClaims' collection
    match /incentiveClaims/{claimId} {
        // Any authenticated faculty can create a claim
        allow create: if isSignedIn() && getUserData(request.auth.uid).role == 'faculty';
        
        // Admins and the user who created it can read.
        allow read: if isSignedIn() && (isAdmin() || resource.data.uid == request.auth.uid);
        
        // Only admins can update the status
        allow update: if isAdmin();
        
        // Only admins can list
        allow list: if isAdmin();
    }
  }
}