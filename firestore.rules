
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function getUserData(uid) {
      // It's safer to check if the path exists before accessing .data
      return exists(/databases/$(database)/documents/users/$(uid)) ? get(/databases/$(database)/documents/users/$(uid)).data : null;
    }

    function isAdmin() {
      let userData = getUserData(request.auth.uid);
      return userData != null && userData.role in ['admin', 'CRO', 'Super-admin'];
    }
    
    function isEvaluator() {
      let userData = getUserData(request.auth.uid);
      return userData != null && userData.role in ['Evaluator', 'CRO', 'Super-admin', 'admin'];
    }

    // Collection: users
    // - Anyone can read public profiles.
    // - Users can create their own profile document.
    // - Users can update their own profile. Admins can update any profile.
    // - Only Super-admins can delete users.
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || getUserData(request.auth.uid).role == 'Super-admin';
      allow delete: if getUserData(request.auth.uid).role == 'Super-admin';
    }

    // Collection: projects
    // - Any authenticated user can read projects.
    // - Users can only create projects for themselves (pi_uid must match auth.uid).
    // - The project's PI or an admin can update the project.
    match /projects/{projectId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.pi_uid);
      allow update: if isSignedIn() && (isOwner(resource.data.pi_uid) || isAdmin());

      // Subcollection: evaluations
      // - Admins can read any evaluation.
      // - Evaluators can only read/write their own evaluation.
      match /evaluations/{evaluatorId} {
        allow read: if isSignedIn() && (isAdmin() || isOwner(evaluatorId));
        allow write: if isSignedIn() && isEvaluator() && isOwner(evaluatorId);
      }
    }
    
    // Collection: notifications
    // - A user can read and update (e.g., mark as read) their own notifications.
    // - Notifications can only be created by the server (via Admin SDK).
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && isOwner(resource.data.uid);
      allow create: if false; // Server-side only
    }
    
    // Collection: incentiveClaims
    // - A user can create their own claim.
    // - A user can read their own claims.
    // - Admins can read and update any claim.
    match /incentiveClaims/{claimId} {
      allow create: if isOwner(request.resource.data.uid);
      allow read: if isSignedIn() && (isOwner(resource.data.uid) || isAdmin());
      allow update: if isSignedIn() && isAdmin();
    }
  }
}
    