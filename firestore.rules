
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is one of the admin types
    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      // Ensure the user document exists and has a role that's in the admin list
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'role' in userDoc.data &&
             userDoc.data.role in ['admin', 'CRO', 'Super-admin'];
    }

    // Helper function to check if user is a Principal (by email)
    function isPrincipal() {
      // This list must be kept in sync with src/lib/constants.ts
      let principal_emails = [
        'ahmc@paruluniversity.ac.in', 'apc@paruluniversity.ac.in', 'agriculture@paruluniversity.ac.in',
        'dphs@paruluniversity.ac.in', 'fls@paruluniversity.ac.in', 'ips@paruluniversity.ac.in',
        'jnhmc@paruluniversity.ac.in', 'pcpr@paruluniversity.ac.in', 'fasahm@paruluniversity.ac.in',
        'fasvdr@paruluniversity.ac.in', 'piar@paruluniversity.ac.in', 'piarts@paruluniversity.ac.in',
        'pia@paruluniversity.ac.in', 'piaresearch@paruluniversity.ac.in', 'piba@paruluniversity.ac.in',
        'pic@paruluniversity.ac.in', 'pica@paruluniversity.ac.in', 'pid@paruluniversity.ac.in',
        'piet@paruluniversity.ac.in', 'pietds1@paruluniversity.ac.in', 'ffa@paruluniversity.ac.in',
        'pihr@paruluniversity.ac.in', 'pihmct@paruluniversity.ac.in', 'pil@paruluniversity.ac.in',
        'pim@paruluniversity.ac.in', 'pimr@paruluniversity.ac.in', 'pimsr@paruluniversity.ac.in',
        'pin@paruluniversity.ac.in', 'pipa@paruluniversity.ac.in', 'piper@paruluniversity.ac.in',
        'piph@paruluniversity.ac.in', 'pipr@paruluniversity.ac.in', 'pipt@paruluniversity.ac.in',
        'piptr@paruluniversity.ac.in', 'pisw@paruluniversity.ac.in', 'pit@paruluniversity.ac.in',
        'fve@paruluniversity.ac.in', 'medical@paruluniversity.ac.in', 'ppi1@paruluniversity.ac.in',
        'pupublichealth@paruluniversity.ac.in', 'psh@paruluniversity.ac.in', 'rhmc@paruluniversity.ac.in',
        'rdc@paruluniversity.ac.in', 'sop@paruluniversity.ac.in'
      ];
      return request.auth.token.email in principal_emails;
    }

    // Helper function to check if user is an HOD
    function isHod() {
      let userProfileDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'designation' in userProfileDoc.data &&
             userProfileDoc.data.designation == 'HOD';
    }
    
    // Helper function to check if the requesting user is an assigned evaluator for THIS project.
    function isAssignedEvaluator(projectData) {
      return 'meetingDetails' in projectData &&
             projectData.meetingDetails != null &&
             'assignedEvaluators' in projectData.meetingDetails &&
             projectData.meetingDetails.assignedEvaluators != null &&
             request.auth.uid in projectData.meetingDetails.assignedEvaluators;
    }
    
    // This is a "god-mode" rule. If a user is an admin, they can do anything.
    // This rule is checked first. If it's true, access is granted.
    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    // The following rules apply to non-admin users.
    
    match /users/{userId} {
      // Any signed-in user can read their own profile, or query for profiles by misId.
      // This is required for the profile page to resolve an MIS ID to a user profile.
      allow get: if request.auth.uid == userId;
      allow list: if request.query.keys().hasAny(['where']) && request.query.where[0][0] == 'misId';
      
      // A user can create their own document.
      allow create: if request.auth.uid == userId;
      // A user can only update their own document. Admins are covered by the global rule above.
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }
    
    match /projects/{projectId} {
      // A user can GET a specific project document if they are the PI, a Co-PI, an evaluator, or an authorized admin role.
      // The complex logic for Principals/HODs is handled on the client after this initial check passes.
      allow get: if request.auth.uid == resource.data.pi_uid ||
                   request.auth.uid in resource.data.coPiUids ||
                   isAssignedEvaluator(resource.data) ||
                   isAdmin(); // Redundant with global rule but safe.
      
      // A user can LIST projects if the query is for their own projects, or if they are an authorized role querying by a specific field.
      allow list: if request.auth != null && (
                    (request.query.keys().hasAny(['where']) && request.query.where[0][0] == 'pi_uid' && request.query.where[0][2] == request.auth.uid) || 
                    (request.query.keys().hasAny(['where']) && request.query.where[0][0] == 'coPiUids' && request.query.where[0][2] == request.auth.uid) || 
                    (request.query.keys().hasAny(['where']) && request.query.where[0][0] == 'pi_email' && request.query.where[0][2] == request.auth.token.email) || 
                    (request.query.keys().hasAny(['where']) && request.query.where[0][0] == 'evaluatedBy' && request.query.where[0][2] == request.auth.uid) ||
                    (request.query.keys().hasAny(['where']) && request.query.where[0][0] == 'meetingDetails.assignedEvaluators' && request.query.where[0][2] == request.auth.uid) ||
                    (isPrincipal() && request.query.keys().hasAny(['where']) && request.query.where[0][0] == 'institute') ||
                    (isHod() && request.query.keys().hasAny(['where']) && request.query.where[0][0] == 'departmentName')
                   );

      // A user can only create a project where they are the PI.
      // They cannot set the status to anything other than Draft/Submitted.
      allow create: if request.auth.uid == request.resource.data.pi_uid &&
                      request.resource.data.status in ['Draft', 'Submitted'] &&
                      !('grant' in request.resource.data) &&
                      !('meetingDetails' in request.resource.data);
      
      // A PI can update their own project (e.g., submit completion report), but cannot change status or grant details.
      // An assigned evaluator can update the project ONLY to add their UID to the evaluatedBy array.
      allow update: if (request.auth.uid == resource.data.pi_uid && !('status' in request.resource.data.diff(resource.data).affectedKeys()) && !('grant' in request.resource.data.diff(resource.data).affectedKeys())) ||
                      (isAssignedEvaluator(resource.data) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['evaluatedBy']));

      // Rules for the evaluations subcollection inside a project
      match /evaluations/{evaluatorId} {
        // We use the parent document's `isAssignedEvaluator` logic here by calling get().
        // The 'get' rule on the project allows this call to succeed for assigned evaluators.
        function canAccessEvaluation() {
            let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
            return isAssignedEvaluator(projectDoc.data);
        }

        // Allow reading all evaluations for a project if you are an assigned evaluator for it.
        allow read: if canAccessEvaluation();
        
        // Allow writing an evaluation only if you are an assigned evaluator AND you are writing to your own document.
        allow write: if canAccessEvaluation() && request.auth.uid == evaluatorId;
      }
    }

    match /notifications/{notificationId} {
      // A user can read and update (e.g., mark as read) their own notifications.
      allow read, update: if request.auth.uid == resource.data.uid;
      // All notifications are created by the server using the Admin SDK, so client creation is denied.
      allow create: if false;
    }
    
    match /incentiveClaims/{claimId} {
      // A user can create and read their own incentive claims.
      allow create: if request.auth.uid == request.resource.data.uid;
      allow read: if request.auth.uid == resource.data.uid;
      // All status updates are handled by the server (Admin SDK), so client updates are denied.
      allow update: if false;
    }
  }
}
