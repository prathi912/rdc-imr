
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isAdmin() {
      let userData = getUserData(request.auth.uid);
      return userData.role in ['admin', 'CRO', 'Super-admin'];
    }
    
    function isEvaluator() {
      let userData = getUserData(request.auth.uid);
      return userData.role in ['Evaluator', 'CRO', 'Super-admin', 'admin'];
    }

    // Collection: users
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if !exists(/databases/$(database)/documents/users/$(userId));
      allow update: if isOwner(userId) || getUserData(request.auth.uid).role == 'Super-admin';
    }

    // Collection: projects
    match /projects/{projectId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isAdmin() || request.auth.uid == resource.data.pi_uid);

      // Subcollection: evaluations
      match /evaluations/{evaluatorId} {
        allow read: if isSignedIn() && (isAdmin() || isOwner(evaluatorId));
        allow write: if isSignedIn() && isEvaluator() && isOwner(evaluatorId);
      }
    }
    
    // Collection: notifications
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.uid);
      allow create: if isSignedIn();
    }
    
    // Collection: incentiveClaims
    match /incentiveClaims/{claimId} {
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.uid;
      allow read: if isSignedIn() && (isOwner(resource.data.uid) || isAdmin());
      allow update: if isSignedIn() && isAdmin();
    }
  }
}
