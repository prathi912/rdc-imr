rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read their own profile, admins can read any.
    // Users can create their own profile.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Only admins can delete users.
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /projects/{projectId} {
      // Any authenticated user can read projects (needed for lists). Details might need stricter rules if sensitive.
      allow read: if request.auth != null;
      
      // Any authenticated user can create a project, but must be their own.
      allow create: if request.auth.uid == request.resource.data.pi_uid;
      
      // Update rules are complex and depend on role.
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                      (request.auth.uid == resource.data.pi_uid && isOwnerUpdatingGrant(request, resource));
    }
    
    // Notifications can only be read/updated by the recipient.
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.uid;
      allow create: if request.auth.uid != null; // Server/functions will create these.
    }
  }
}

// Helper function for project grant updates by the project owner (PI).
function isOwnerUpdatingGrant(request, resource) {
  let grantBefore = resource.data.grant;
  let grantAfter = request.resource.data.grant;
  let changedKeys = request.resource.data.diff(resource.data).affectedKeys();

  // Allow update only on the 'grant' field.
  return changedKeys.hasOnly(['grant']) && (
    // 1. PI Submitting bank details
    (grantBefore.status == 'Pending Bank Details' && grantAfter.status == 'Bank Details Submitted' && grantBefore.bankDetails == null && grantAfter.bankDetails != null) ||
    // 2. PI adding/updating transactions
    (grantBefore.status == 'Disbursed' && grantAfter.status == 'Disbursed' && grantAfter.transactions.size() >= (grantBefore.transactions != null ? grantBefore.transactions.size() : 0) ) ||
    // 3. PI finalizing the report
    (grantBefore.status == 'Disbursed' && grantAfter.status == 'Utilization Submitted' && grantBefore.utilizationSubmissionDate == null && grantAfter.utilizationSubmissionDate != null)
  );
}
